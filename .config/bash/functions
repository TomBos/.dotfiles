#!/usr/bin/env bash
cd() {
	if [[ "$1" == //* ]]; then
		command cd ..
	else
		command cd "$@";
	fi
};


stow() {
	if [[ "$(pwd)" != "$HOME/.dotfiles" ]]; then
		echo -e "\033[33m Stow was blocked to prevent creating misplaced symlinks  "
	else
		command stow "$@"
		bash "$XDG_CONFIG_HOME/git/generate-git-config"
	fi
};


git-submodule-update() {
	git submodule update --remote --merge
};


echo() {
	if [[ "$#" -eq 1 ]] && [[ "${1:-}" = "$PATH" ]]; then
		command echo "$PATH" | tr ':' '\n'
	else
		command echo "$@"
	fi
}


copy-branch() {
	git rev-parse --abbrev-ref HEAD | wl-copy
};


unzip() {
	[[ -z "$1" ]] && { echo "Usage: unzip <file.zip>"; return 1; }
	local dirname="${1%.zip}"
	dirname="${dirname// /-}"
	command unzip "$1" -d "$dirname"
};


record() {
	wf-recorder -g "$(slurp)" -f "$XDG_PICTURES_DIR/$(date +%Y-%m-%d_%H-%M-%S).mp4"
};


screenshot() {
	grim -g "$(slurp)" "$XDG_PICTURES_DIR/$(date +%Y-%m-%d_%H-%M-%S).jpg"
};


mount-as-usb() {
    local USB_DIR="/mnt/usb"

    # Check if directory exists
    if [[ ! -d "$USB_DIR" ]]; then
        echo "$USB_DIR does not exist, exiting"
        return 1
    fi

    # Check if a device argument was provided
    if [[ -z "$1" ]]; then
        echo "Usage: mount-as-usb /dev/sdX1"
        return 1
    fi

    # Mount with UID/GID, show errors if it fails
    sudo mount -o uid=1000,gid=1000 "$1" "$USB_DIR" || {
        echo "Mount failed for $1"
        return 1
    }

    echo "$1 mounted to $USB_DIR"
};

